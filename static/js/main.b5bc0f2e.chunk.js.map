{"version":3,"sources":["MintCountdown.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","connection.tsx","candy-machine.ts"],"names":["useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","done","marginBottom","fontWeight","item","MintCountdown","date","status","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","wallet","useWallet","connection","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","useEffect","mint","a","removeAccountChangeListener","previousGatewayStatus","value","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","state","console","log","disabled","onClick","gatekeeper","network","gatekeeperNetwork","toBase58","ACTIVE","findGatewayToken","publicKey","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","Error","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","endSettings","endSettingType","toDate","number","goLiveDate","anchor","Date","getTime","undefined","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","message","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","cluster","anchorWallet","useMemo","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","commitment","Connection","candyMachineId","getCandyMachineState","cndy","active","toNumber","presale","isWLUser","userPrice","price","whitelistMintSettings","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","parseInt","amount","tokenMint","valid","gte","getBalance","limit","Math","min","itemsAvailable","itemsRedeemed","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","mode","burnEveryTime","expireOnUse","hideDuration","startsWith","beforeTransactions","afterTransactions","document","getElementById","click","connected","program","createAccountsForMint","setupMint","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","loop","setTimeout","Container","marginTop","maxWidth","position","paddingBottom","backgroundColor","Grid","container","direction","wrap","xs","Typography","formatNumber","asNumber","align","CANDY_MACHINE_PROGRAM","clusterUrl","handleTransaction","signatures","sig","equals","sendTransaction","error","broadcastTransaction","options","autoShowModal","val","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","type","process","e","getCandyMachineId","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","SequenceType","getErrorForTransaction","txid","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","forEach","m","regex","exec","index","lastIndex","length","push","sendTransactions","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","Transaction","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","partiallySignedTransactions","filter","t","fullySignedTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","slot","StopOnFailure","Promise","all","txs","result","awaitConfirmation","includesFeePayer","rawTransaction","serialize","skipPreflight","sendRawTransaction","confirmation","getUnixTs","timeout","startTime","sleep","simulateResult","simulateTransaction","logs","line","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","queryStatus","confirmations","subId","resolve","reject","onSignature","context","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","TOKEN_METADATA_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","fetchIdl","idl","account","fetch","id","authority","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","userTokenAccount","setupState","userPayingAccountAddress","remainingAccounts","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","rm","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","mintTxn"],"mappings":"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","file":"static/js/main.b5bc0f2e.chunk.js","sourcesContent":["import { Paper } from '@material-ui/core';\r\nimport Countdown from 'react-countdown';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n      padding: theme.spacing(0),\r\n      '& > *': {\r\n        margin: theme.spacing(0.4),\r\n        width: theme.spacing(6),\r\n        height: theme.spacing(6),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignContent: 'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        background: '#384457',\r\n        color: 'white',\r\n        borderRadius: 5,\r\n        fontSize: 10,\r\n      },\r\n    },\r\n    done: {\r\n      display: 'flex',\r\n      margin: 0,\r\n      marginBottom: theme.spacing(0.5),\r\n      height: theme.spacing(3.5),\r\n      padding: theme.spacing(1),\r\n      flexDirection: 'column',\r\n      alignContent: 'center',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      background: '#384457',\r\n      color: 'white',\r\n      borderRadius: 5,\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n    item: {\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n  }),\r\n);\r\n\r\ninterface MintCountdownProps {\r\n  date: Date | undefined;\r\n  style?: React.CSSProperties;\r\n  status?: string;\r\n  onComplete?: () => void;\r\n}\r\n\r\ninterface MintCountdownRender {\r\n  days: number;\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n  completed: boolean;\r\n}\r\n\r\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\r\n  date,\r\n  status,\r\n  style,\r\n  onComplete,\r\n}) => {\r\n  const classes = useStyles();\r\n  const renderCountdown = ({\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n    completed,\r\n  }: MintCountdownRender) => {\r\n    hours += days * 24;\r\n    if (completed) {\r\n      return status ? <span className={classes.done}>{status}</span> : null;\r\n    } else {\r\n      return (\r\n        <div className={classes.root} style={style}>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {hours < 10 ? `0${hours}` : hours}\r\n            </span>\r\n            <span>hrs</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {minutes < 10 ? `0${minutes}` : minutes}\r\n            </span>\r\n            <span>mins</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {seconds < 10 ? `0${seconds}` : seconds}\r\n            </span>\r\n            <span>secs</span>\r\n          </Paper>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  if (date) {\r\n    return (\r\n      <Countdown\r\n        date={date}\r\n        onComplete={onComplete}\r\n        renderer={renderCountdown}\r\n      />\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport { CandyMachineAccount } from './candy-machine';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\r\nimport {\r\n  findGatewayToken,\r\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\r\n  onGatewayTokenChange,\r\n  removeAccountChangeListener,\r\n} from '@identity.com/solana-gateway-ts';\r\n\r\nexport const CTAButton = styled(Button)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`; // add your own styles here\r\n\r\nexport const MintButton = ({\r\n  onMint,\r\n  candyMachine,\r\n  isMinting,\r\n  setIsMinting,\r\n  isActive,\r\n}: {\r\n  onMint: () => Promise<void>;\r\n  candyMachine?: CandyMachineAccount;\r\n  isMinting: boolean;\r\n  setIsMinting: (val: boolean) => void;\r\n  isActive: boolean;\r\n}) => {\r\n  const wallet = useWallet();\r\n  const connection = useConnection();\r\n  const [verified, setVerified] = useState(false);\r\n  const { requestGatewayToken, gatewayStatus } = useGateway();\r\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n  const getMintButtonContent = () => {\r\n    if (candyMachine?.state.isSoldOut) {\r\n      return 'SOLD OUT';\r\n    } else if (isMinting) {\r\n      return <CircularProgress />;\r\n    } else if (\r\n      candyMachine?.state.isPresale ||\r\n      candyMachine?.state.isWhitelistOnly\r\n    ) {\r\n      return 'WHITELIST MINT';\r\n    }\r\n\r\n    return 'MINT';\r\n  };\r\n\r\n  useEffect(() => {\r\n    const mint = async () => {\r\n      await removeAccountChangeListener(\r\n        connection.connection,\r\n        webSocketSubscriptionId,\r\n      );\r\n      await onMint();\r\n\r\n      setClicked(false);\r\n      setVerified(false);\r\n    };\r\n    if (verified && clicked) {\r\n      mint();\r\n    }\r\n  }, [\r\n    verified,\r\n    clicked,\r\n    connection.connection,\r\n    onMint,\r\n    webSocketSubscriptionId,\r\n  ]);\r\n\r\n  const previousGatewayStatus = usePrevious(gatewayStatus);\r\n  useEffect(() => {\r\n    const fromStates = [\r\n      GatewayStatus.NOT_REQUESTED,\r\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\r\n    ];\r\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\r\n    if (\r\n      fromStates.find(state => previousGatewayStatus === state) &&\r\n      !invalidToStates.find(state => gatewayStatus === state)\r\n    ) {\r\n      setIsMinting(true);\r\n    }\r\n    console.log('change: ', gatewayStatus);\r\n  }, [setIsMinting, previousGatewayStatus, gatewayStatus]);\r\n\r\n  return (\r\n    <CTAButton\r\n      disabled={isMinting || !isActive}\r\n      onClick={async () => {\r\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\r\n          const network =\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\r\n          if (network === 'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6') {\r\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\r\n              await onMint();\r\n            } else {\r\n              // setIsMinting(true);\r\n              await requestGatewayToken();\r\n              console.log('after: ', gatewayStatus);\r\n            }\r\n          } else if (\r\n            network === 'ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE' ||\r\n            network === 'tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt'\r\n          ) {\r\n            setClicked(true);\r\n            const gatewayToken = await findGatewayToken(\r\n              connection.connection,\r\n              wallet.publicKey!,\r\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n            );\r\n\r\n            if (gatewayToken?.isValid()) {\r\n              await onMint();\r\n            } else {\r\n              window.open(\r\n                `https://verify.encore.fans/?gkNetwork=${network}`,\r\n                '_blank',\r\n              );\r\n\r\n              const gatewayTokenAddress =\r\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\r\n                  wallet.publicKey!,\r\n                  candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n                );\r\n\r\n              setWebSocketSubscriptionId(\r\n                onGatewayTokenChange(\r\n                  connection.connection,\r\n                  gatewayTokenAddress,\r\n                  () => setVerified(true),\r\n                  'confirmed',\r\n                ),\r\n              );\r\n            }\r\n          } else {\r\n            setClicked(false);\r\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\r\n          }\r\n        } else {\r\n          await onMint();\r\n          setClicked(false);\r\n        }\r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      {getMintButtonContent()}\r\n    </CTAButton>\r\n  );\r\n};\r\n\r\nfunction usePrevious<T>(value: T): T | undefined {\r\n  const ref = useRef<T>();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n  return ref.current;\r\n}\r\n","import { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\n\r\nimport styled from 'styled-components';\r\nimport { Container, Snackbar } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {\r\n  Commitment,\r\n  Connection,\r\n  PublicKey,\r\n  Transaction,\r\n} from '@solana/web3.js';\r\nimport { useWallet } from '@solana/wallet-adapter-react';\r\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CANDY_MACHINE_PROGRAM,\r\n  CandyMachineAccount,\r\n  createAccountsForMint,\r\n  getCandyMachineState,\r\n  getCollectionPDA,\r\n  mintOneToken,\r\n  SetupState,\r\n} from './candy-machine';\r\nimport { AlertState, formatNumber, getAtaForMint, toDate } from './utils';\r\nimport { MintCountdown } from './MintCountdown';\r\nimport { MintButton } from './MintButton';\r\nimport { GatewayProvider } from '@civic/solana-gateway-react';\r\nimport { sendTransaction } from './connection';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MintContainer = styled.div``; // add your owns styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n  network: WalletAdapterNetwork;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [isUserMinting, setIsUserMinting] = useState(false);\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: '',\r\n    severity: undefined,\r\n  });\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [endDate, setEndDate] = useState<Date>();\r\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\r\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\r\n  const [isPresale, setIsPresale] = useState(false);\r\n  const [isValidBalance, setIsValidBalance] = useState(false);\r\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\r\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\r\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\r\n\r\n  const rpcUrl = props.rpcHost;\r\n  const wallet = useWallet();\r\n  const cluster = props.network;\r\n  const anchorWallet = useMemo(() => {\r\n    if (\r\n      !wallet ||\r\n      !wallet.publicKey ||\r\n      !wallet.signAllTransactions ||\r\n      !wallet.signTransaction\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    } as anchor.Wallet;\r\n  }, [wallet]);\r\n\r\n  const refreshCandyMachineState = useCallback(\r\n    async (commitment: Commitment = 'confirmed') => {\r\n      if (!anchorWallet) {\r\n        return;\r\n      }\r\n\r\n      const connection = new Connection(props.rpcHost, commitment);\r\n\r\n      if (props.candyMachineId) {\r\n        try {\r\n          const cndy = await getCandyMachineState(\r\n            anchorWallet,\r\n            props.candyMachineId,\r\n            connection,\r\n          );\r\n          let active =\r\n            cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\r\n          let presale = false;\r\n\r\n          // duplication of state to make sure we have the right values!\r\n          let isWLUser = false;\r\n          let userPrice = cndy.state.price;\r\n\r\n          // whitelist mint?\r\n          if (cndy?.state.whitelistMintSettings) {\r\n            // is it a presale mint?\r\n            if (\r\n              cndy.state.whitelistMintSettings.presale &&\r\n              (!cndy.state.goLiveDate ||\r\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\r\n            ) {\r\n              presale = true;\r\n            }\r\n            // is there a discount?\r\n            if (cndy.state.whitelistMintSettings.discountPrice) {\r\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\r\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\r\n            } else {\r\n              setDiscountPrice(undefined);\r\n              // when presale=false and discountPrice=null, mint is restricted\r\n              // to whitelist users only\r\n              if (!cndy.state.whitelistMintSettings.presale) {\r\n                cndy.state.isWhitelistOnly = true;\r\n              }\r\n            }\r\n            // retrieves the whitelist token\r\n            const mint = new anchor.web3.PublicKey(\r\n              cndy.state.whitelistMintSettings.mint,\r\n            );\r\n            const token = (\r\n              await getAtaForMint(mint, anchorWallet.publicKey)\r\n            )[0];\r\n\r\n            try {\r\n              const balance = await connection.getTokenAccountBalance(token);\r\n              isWLUser = parseInt(balance.value.amount) > 0;\r\n              // only whitelist the user if the balance > 0\r\n              setIsWhitelistUser(isWLUser);\r\n\r\n              if (cndy.state.isWhitelistOnly) {\r\n                active = isWLUser && (presale || active);\r\n              }\r\n            } catch (e) {\r\n              setIsWhitelistUser(false);\r\n              // no whitelist user, no mint\r\n              if (cndy.state.isWhitelistOnly) {\r\n                active = false;\r\n              }\r\n              console.log(\r\n                'There was a problem fetching whitelist token balance',\r\n              );\r\n              console.log(e);\r\n            }\r\n          }\r\n          userPrice = isWLUser ? userPrice : cndy.state.price;\r\n\r\n          if (cndy?.state.tokenMint) {\r\n            // retrieves the SPL token\r\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\r\n            const token = (\r\n              await getAtaForMint(mint, anchorWallet.publicKey)\r\n            )[0];\r\n            try {\r\n              const balance = await connection.getTokenAccountBalance(token);\r\n\r\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\r\n\r\n              // only allow user to mint if token balance >  the user if the balance > 0\r\n              setIsValidBalance(valid);\r\n              active = active && valid;\r\n            } catch (e) {\r\n              setIsValidBalance(false);\r\n              active = false;\r\n              // no whitelist user, no mint\r\n              console.log('There was a problem fetching SPL token balance');\r\n              console.log(e);\r\n            }\r\n          } else {\r\n            const balance = new anchor.BN(\r\n              await connection.getBalance(anchorWallet.publicKey),\r\n            );\r\n            const valid = balance.gte(userPrice);\r\n            setIsValidBalance(valid);\r\n            active = active && valid;\r\n          }\r\n\r\n          // datetime to stop the mint?\r\n          if (cndy?.state.endSettings?.endSettingType.date) {\r\n            setEndDate(toDate(cndy.state.endSettings.number));\r\n            if (\r\n              cndy.state.endSettings.number.toNumber() <\r\n              new Date().getTime() / 1000\r\n            ) {\r\n              active = false;\r\n            }\r\n          }\r\n          // amount to stop the mint?\r\n          if (cndy?.state.endSettings?.endSettingType.amount) {\r\n            let limit = Math.min(\r\n              cndy.state.endSettings.number.toNumber(),\r\n              cndy.state.itemsAvailable,\r\n            );\r\n            if (cndy.state.itemsRedeemed < limit) {\r\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n            } else {\r\n              setItemsRemaining(0);\r\n              cndy.state.isSoldOut = true;\r\n            }\r\n          } else {\r\n            setItemsRemaining(cndy.state.itemsRemaining);\r\n          }\r\n\r\n          if (cndy.state.isSoldOut) {\r\n            active = false;\r\n          }\r\n\r\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\r\n          const collectionPDAAccount = await connection.getAccountInfo(\r\n            collectionPDA,\r\n          );\r\n\r\n          setIsActive((cndy.state.isActive = active));\r\n          setIsPresale((cndy.state.isPresale = presale));\r\n          setCandyMachine(cndy);\r\n\r\n          const txnEstimate =\r\n            892 +\r\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\r\n            (cndy.state.tokenMint ? 66 : 0) +\r\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\r\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\r\n            (cndy.state.gatekeeper ? 33 : 0) +\r\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\r\n\r\n          setNeedTxnSplit(txnEstimate > 1230);\r\n        } catch (e) {\r\n          if (e instanceof Error) {\r\n            if (\r\n              e.message === `Account does not exist ${props.candyMachineId}`\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\r\n                severity: 'error',\r\n                hideDuration: null,\r\n              });\r\n            } else if (\r\n              e.message.startsWith('failed to get info about account')\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\r\n                severity: 'error',\r\n                hideDuration: null,\r\n              });\r\n            }\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: `${e}`,\r\n              severity: 'error',\r\n              hideDuration: null,\r\n            });\r\n          }\r\n          console.log(e);\r\n        }\r\n      } else {\r\n        setAlertState({\r\n          open: true,\r\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\r\n          severity: 'error',\r\n          hideDuration: null,\r\n        });\r\n      }\r\n    },\r\n    [anchorWallet, props.candyMachineId, props.rpcHost],\r\n  );\r\n\r\n  const onMint = async (\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = [],\r\n  ) => {\r\n    try {\r\n      setIsUserMinting(true);\r\n      document.getElementById('#identity')?.click();\r\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n        let setupMint: SetupState | undefined;\r\n        if (needTxnSplit && setupTxn === undefined) {\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Please sign account setup transaction',\r\n            severity: 'info',\r\n          });\r\n          setupMint = await createAccountsForMint(\r\n            candyMachine,\r\n            wallet.publicKey,\r\n          );\r\n          let status: any = { err: true };\r\n          if (setupMint.transaction) {\r\n            status = await awaitTransactionSignatureConfirmation(\r\n              setupMint.transaction,\r\n              props.txTimeout,\r\n              props.connection,\r\n              true,\r\n            );\r\n          }\r\n          if (status && !status.err) {\r\n            setSetupTxn(setupMint);\r\n            setAlertState({\r\n              open: true,\r\n              message:\r\n                'Setup transaction succeeded! Please sign minting transaction',\r\n              severity: 'info',\r\n            });\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: 'Mint failed! Please try again!',\r\n              severity: 'error',\r\n            });\r\n            setIsUserMinting(false);\r\n            return;\r\n          }\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Please sign minting transaction',\r\n            severity: 'info',\r\n          });\r\n        }\r\n\r\n        let mintResult = await mintOneToken(\r\n          candyMachine,\r\n          wallet.publicKey,\r\n          beforeTransactions,\r\n          afterTransactions,\r\n          setupMint ?? setupTxn,\r\n        );\r\n\r\n        let status: any = { err: true };\r\n        let metadataStatus = null;\r\n        if (mintResult) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintResult.mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            true,\r\n          );\r\n\r\n          metadataStatus =\r\n            await candyMachine.program.provider.connection.getAccountInfo(\r\n              mintResult.metadataKey,\r\n              'processed',\r\n            );\r\n          console.log('Metadata status: ', !!metadataStatus);\r\n        }\r\n\r\n        if (status && !status.err && metadataStatus) {\r\n          // manual update since the refresh might not detect\r\n          // the change immediately\r\n          let remaining = itemsRemaining! - 1;\r\n          setItemsRemaining(remaining);\r\n          setIsActive((candyMachine.state.isActive = remaining > 0));\r\n          candyMachine.state.isSoldOut = remaining === 0;\r\n          setSetupTxn(undefined);\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Congratulations! Mint succeeded!',\r\n            severity: 'success',\r\n            hideDuration: 7000,\r\n          });\r\n          refreshCandyMachineState('processed');\r\n        } else if (status && !status.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message:\r\n              'Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.',\r\n            severity: 'error',\r\n            hideDuration: 8000,\r\n          });\r\n          refreshCandyMachineState();\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Mint failed! Please try again!',\r\n            severity: 'error',\r\n          });\r\n          refreshCandyMachineState();\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || 'Minting failed! Please try again!';\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = 'Transaction timeout! Please try again.';\r\n        } else if (error.message.indexOf('0x137')) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf('0x135')) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n          window.location.reload();\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: 'error',\r\n      });\r\n      // updates the candy machine state to reflect the latest\r\n      // information on chain\r\n      refreshCandyMachineState();\r\n    } finally {\r\n      setIsUserMinting(false);\r\n    }\r\n  };\r\n\r\n  const toggleMintButton = () => {\r\n    let active = !isActive || isPresale;\r\n\r\n    if (active) {\r\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\r\n        active = false;\r\n      }\r\n      if (endDate && Date.now() >= endDate.getTime()) {\r\n        active = false;\r\n      }\r\n    }\r\n\r\n    if (\r\n      isPresale &&\r\n      candyMachine!.state.goLiveDate &&\r\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\r\n    ) {\r\n      setIsPresale((candyMachine!.state.isPresale = false));\r\n    }\r\n\r\n    setIsActive((candyMachine!.state.isActive = active));\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshCandyMachineState();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    refreshCandyMachineState,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    (function loop() {\r\n      setTimeout(() => {\r\n        refreshCandyMachineState();\r\n        loop();\r\n      }, 20000);\r\n    })();\r\n  }, [refreshCandyMachineState]);\r\n\r\n  return (\r\n    <Container style={{ marginTop: 100 }}>\r\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\r\n        <Paper\r\n          style={{\r\n            padding: 24,\r\n            paddingBottom: 10,\r\n            backgroundColor: '#151A1F',\r\n            borderRadius: 6,\r\n          }}\r\n        >\r\n          {!wallet.connected ? (\r\n            <ConnectButton>Connect Wallet</ConnectButton>\r\n          ) : (\r\n            <>\r\n              {candyMachine && (\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justifyContent=\"center\"\r\n                  wrap=\"nowrap\"\r\n                >\r\n                  <Grid item xs={3}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      Remaining\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      color=\"textPrimary\"\r\n                      style={{\r\n                        fontWeight: 'bold',\r\n                      }}\r\n                    >\r\n                      {`${itemsRemaining}`}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      {isWhitelistUser && discountPrice\r\n                        ? 'Discount Price'\r\n                        : 'Price'}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      color=\"textPrimary\"\r\n                      style={{ fontWeight: 'bold' }}\r\n                    >\r\n                      {isWhitelistUser && discountPrice\r\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\r\n                        : `◎ ${formatNumber.asNumber(\r\n                            candyMachine.state.price,\r\n                          )}`}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={5}>\r\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\r\n                      <>\r\n                        <MintCountdown\r\n                          key=\"endSettings\"\r\n                          date={getCountdownDate(candyMachine)}\r\n                          style={{ justifyContent: 'flex-end' }}\r\n                          status=\"COMPLETED\"\r\n                          onComplete={toggleMintButton}\r\n                        />\r\n                        <Typography\r\n                          variant=\"caption\"\r\n                          align=\"center\"\r\n                          display=\"block\"\r\n                          style={{ fontWeight: 'bold' }}\r\n                        >\r\n                          TO END OF MINT\r\n                        </Typography>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <MintCountdown\r\n                          key=\"goLive\"\r\n                          date={getCountdownDate(candyMachine)}\r\n                          style={{ justifyContent: 'flex-end' }}\r\n                          status={\r\n                            candyMachine?.state?.isSoldOut ||\r\n                            (endDate && Date.now() > endDate.getTime())\r\n                              ? 'COMPLETED'\r\n                              : isPresale\r\n                              ? 'PRESALE'\r\n                              : 'LIVE'\r\n                          }\r\n                          onComplete={toggleMintButton}\r\n                        />\r\n                        {isPresale &&\r\n                          candyMachine.state.goLiveDate &&\r\n                          candyMachine.state.goLiveDate.toNumber() >\r\n                            new Date().getTime() / 1000 && (\r\n                            <Typography\r\n                              variant=\"caption\"\r\n                              align=\"center\"\r\n                              display=\"block\"\r\n                              style={{ fontWeight: 'bold' }}\r\n                            >\r\n                              UNTIL PUBLIC MINT\r\n                            </Typography>\r\n                          )}\r\n                      </>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              )}\r\n              <MintContainer>\r\n                {candyMachine?.state.isActive &&\r\n                candyMachine?.state.gatekeeper &&\r\n                wallet.publicKey &&\r\n                wallet.signTransaction ? (\r\n                  <GatewayProvider\r\n                    wallet={{\r\n                      publicKey:\r\n                        wallet.publicKey ||\r\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                      //@ts-ignore\r\n                      signTransaction: wallet.signTransaction,\r\n                    }}\r\n                    gatekeeperNetwork={\r\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                    }\r\n                    clusterUrl={rpcUrl}\r\n                    cluster={cluster}\r\n                    handleTransaction={async (transaction: Transaction) => {\r\n                      setIsUserMinting(true);\r\n                      const userMustSign = transaction.signatures.find(sig =>\r\n                        sig.publicKey.equals(wallet.publicKey!),\r\n                      );\r\n                      if (userMustSign) {\r\n                        setAlertState({\r\n                          open: true,\r\n                          message: 'Please sign one-time Civic Pass issuance',\r\n                          severity: 'info',\r\n                        });\r\n                        try {\r\n                          transaction = await wallet.signTransaction!(\r\n                            transaction,\r\n                          );\r\n                        } catch (e) {\r\n                          setAlertState({\r\n                            open: true,\r\n                            message: 'User cancelled signing',\r\n                            severity: 'error',\r\n                          });\r\n                          // setTimeout(() => window.location.reload(), 2000);\r\n                          setIsUserMinting(false);\r\n                          throw e;\r\n                        }\r\n                      } else {\r\n                        setAlertState({\r\n                          open: true,\r\n                          message: 'Refreshing Civic Pass',\r\n                          severity: 'info',\r\n                        });\r\n                      }\r\n                      try {\r\n                        await sendTransaction(\r\n                          props.connection,\r\n                          wallet,\r\n                          transaction,\r\n                          [],\r\n                          true,\r\n                          'confirmed',\r\n                        );\r\n                        setAlertState({\r\n                          open: true,\r\n                          message: 'Please sign minting',\r\n                          severity: 'info',\r\n                        });\r\n                      } catch (e) {\r\n                        setAlertState({\r\n                          open: true,\r\n                          message:\r\n                            'Solana dropped the transaction, please try again',\r\n                          severity: 'warning',\r\n                        });\r\n                        console.error(e);\r\n                        // setTimeout(() => window.location.reload(), 2000);\r\n                        setIsUserMinting(false);\r\n                        throw e;\r\n                      }\r\n                      await onMint();\r\n                    }}\r\n                    broadcastTransaction={false}\r\n                    options={{ autoShowModal: false }}\r\n                  >\r\n                    <MintButton\r\n                      candyMachine={candyMachine}\r\n                      isMinting={isUserMinting}\r\n                      setIsMinting={val => setIsUserMinting(val)}\r\n                      onMint={onMint}\r\n                      isActive={\r\n                        isActive ||\r\n                        (isPresale && isWhitelistUser && isValidBalance)\r\n                      }\r\n                    />\r\n                  </GatewayProvider>\r\n                ) : (\r\n                  <MintButton\r\n                    candyMachine={candyMachine}\r\n                    isMinting={isUserMinting}\r\n                    setIsMinting={val => setIsUserMinting(val)}\r\n                    onMint={onMint}\r\n                    isActive={\r\n                      isActive ||\r\n                      (isPresale && isWhitelistUser && isValidBalance)\r\n                    }\r\n                  />\r\n                )}\r\n              </MintContainer>\r\n            </>\r\n          )}\r\n          <Typography\r\n            variant=\"caption\"\r\n            align=\"center\"\r\n            display=\"block\"\r\n            style={{ marginTop: 7, color: 'grey' }}\r\n          >\r\n            Powered by METAPLEX\r\n          </Typography>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={\r\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\r\n        }\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst getCountdownDate = (\r\n  candyMachine: CandyMachineAccount,\r\n): Date | undefined => {\r\n  if (\r\n    candyMachine.state.isActive &&\r\n    candyMachine.state.endSettings?.endSettingType.date\r\n  ) {\r\n    return toDate(candyMachine.state.endSettings.number);\r\n  }\r\n\r\n  return toDate(\r\n    candyMachine.state.goLiveDate\r\n      ? candyMachine.state.goLiveDate\r\n      : candyMachine.state.isPresale\r\n      ? new anchor.BN(new Date().getTime() / 1000)\r\n      : undefined,\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import './App.css';\r\nimport { useMemo } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\nimport Home from './Home';\r\nimport { DEFAULT_TIMEOUT } from './connection';\r\nimport { clusterApiUrl } from '@solana/web3.js';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from '@solana/wallet-adapter-react';\r\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\r\n\r\nimport { ThemeProvider, createTheme } from '@material-ui/core';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n  try {\r\n    const candyMachineId = new anchor.web3.PublicKey(\r\n      process.env.REACT_APP_CANDY_MACHINE_ID!,\r\n    );\r\n\r\n    return candyMachineId;\r\n  } catch (e) {\r\n    console.log('Failed to construct CandyMachineId', e);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst candyMachineId = getCandyMachineId();\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(\r\n  rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\r\n);\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getSlopeWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n    ],\r\n    [],\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletDialogProvider>\r\n            <Home\r\n              candyMachineId={candyMachineId}\r\n              connection={connection}\r\n              txTimeout={DEFAULT_TIMEOUT}\r\n              rpcHost={rpcHost}\r\n              network={network}\r\n            />\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import * as anchor from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\r\n  hideDuration?: number | null;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat('en-US', {\r\n  style: 'decimal',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return '--';\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\r\n);\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from('gateway'),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n","import {\r\n  Keypair,\r\n  Commitment,\r\n  Connection,\r\n  RpcResponseAndContext,\r\n  SignatureStatus,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionSignature,\r\n  Blockhash,\r\n  FeeCalculator,\r\n} from '@solana/web3.js';\r\n\r\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\r\n\r\ninterface BlockhashAndFeeCalculator {\r\n  blockhash: Blockhash;\r\n  feeCalculator: FeeCalculator;\r\n}\r\n\r\nexport const DEFAULT_TIMEOUT = 60000;\r\n\r\nexport const getErrorForTransaction = async (\r\n  connection: Connection,\r\n  txid: string,\r\n) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, 'max');\r\n\r\n  const tx = await connection.getParsedConfirmedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach(log => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport enum SequenceType {\r\n  Sequential,\r\n  Parallel,\r\n  StopOnFailure,\r\n}\r\n\r\nexport async function sendTransactionsWithManualRetry(\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[][],\r\n  signers: Keypair[][],\r\n): Promise<(string | undefined)[]> {\r\n  let stopPoint = 0;\r\n  let tries = 0;\r\n  let lastInstructionsLength = null;\r\n  let toRemoveSigners: Record<number, boolean> = {};\r\n  instructions = instructions.filter((instr, i) => {\r\n    if (instr.length > 0) {\r\n      return true;\r\n    } else {\r\n      toRemoveSigners[i] = true;\r\n      return false;\r\n    }\r\n  });\r\n  let ids: string[] = [];\r\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n\r\n  while (stopPoint < instructions.length && tries < 3) {\r\n    instructions = instructions.slice(stopPoint, instructions.length);\r\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n\r\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n    else tries = 0;\r\n\r\n    try {\r\n      if (instructions.length === 1) {\r\n        const id = await sendTransactionWithRetry(\r\n          connection,\r\n          wallet,\r\n          instructions[0],\r\n          filteredSigners[0],\r\n          'single',\r\n        );\r\n        ids.push(id.txid);\r\n        stopPoint = 1;\r\n      } else {\r\n        const { txs } = await sendTransactions(\r\n          connection,\r\n          wallet,\r\n          instructions,\r\n          filteredSigners,\r\n          SequenceType.StopOnFailure,\r\n          'single',\r\n        );\r\n        ids = ids.concat(txs.map(t => t.txid));\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    console.log(\r\n      'Died on ',\r\n      stopPoint,\r\n      'retrying from instruction',\r\n      instructions[stopPoint],\r\n      'instructions length is',\r\n      instructions.length,\r\n    );\r\n    lastInstructionsLength = instructions.length;\r\n  }\r\n\r\n  return ids;\r\n}\r\n\r\nexport const sendTransactions = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructionSet: TransactionInstruction[][],\r\n  signersSet: Keypair[][],\r\n  sequenceType: SequenceType = SequenceType.Parallel,\r\n  commitment: Commitment = 'singleGossip',\r\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\r\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n  block?: BlockhashAndFeeCalculator,\r\n  beforeTransactions: Transaction[] = [],\r\n  afterTransactions: Transaction[] = [],\r\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  const unsignedTxns: Transaction[] = beforeTransactions;\r\n\r\n  if (!block) {\r\n    block = await connection.getRecentBlockhash(commitment);\r\n  }\r\n\r\n  for (let i = 0; i < instructionSet.length; i++) {\r\n    const instructions = instructionSet[i];\r\n    const signers = signersSet[i];\r\n\r\n    if (instructions.length === 0) {\r\n      continue;\r\n    }\r\n\r\n    let transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = block.blockhash;\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n\r\n    unsignedTxns.push(transaction);\r\n  }\r\n  unsignedTxns.push(...afterTransactions);\r\n\r\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\r\n    t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\r\n  );\r\n  const fullySignedTransactions = unsignedTxns.filter(\r\n    t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\r\n  );\r\n  let signedTxns = await wallet.signAllTransactions(\r\n    partiallySignedTransactions,\r\n  );\r\n  signedTxns = fullySignedTransactions.concat(signedTxns);\r\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n\r\n  console.log(\r\n    'Signed txns length',\r\n    signedTxns.length,\r\n    'vs handed in length',\r\n    instructionSet.length,\r\n  );\r\n  for (let i = 0; i < signedTxns.length; i++) {\r\n    const signedTxnPromise = sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: signedTxns[i],\r\n    });\r\n\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      try {\r\n        await signedTxnPromise.then(({ txid, slot }) =>\r\n          successCallback(txid, i),\r\n        );\r\n        pendingTxns.push(signedTxnPromise);\r\n      } catch (e) {\r\n        console.log('Failed at txn index:', i);\r\n        console.log('Caught failure:', e);\r\n\r\n        failCallback(signedTxns[i], i);\r\n        if (sequenceType === SequenceType.StopOnFailure) {\r\n          return {\r\n            number: i,\r\n            txs: await Promise.all(pendingTxns),\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      pendingTxns.push(signedTxnPromise);\r\n    }\r\n  }\r\n\r\n  if (sequenceType !== SequenceType.Parallel) {\r\n    const result = await Promise.all(pendingTxns);\r\n    return { number: signedTxns.length, txs: result };\r\n  }\r\n\r\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n};\r\n\r\nexport const sendTransaction = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[] | Transaction,\r\n  signers: Keypair[],\r\n  awaitConfirmation = true,\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction: Transaction;\r\n  if (instructions instanceof Transaction) {\r\n    transaction = instructions;\r\n  } else {\r\n    transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = (\r\n      block || (await connection.getRecentBlockhash(commitment))\r\n    ).blockhash;\r\n\r\n    if (includesFeePayer) {\r\n      transaction.setSigners(...signers.map(s => s.publicKey));\r\n    } else {\r\n      transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n      );\r\n    }\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    }\r\n  }\r\n\r\n  const rawTransaction = transaction.serialize();\r\n  let options = {\r\n    skipPreflight: true,\r\n    commitment,\r\n  };\r\n\r\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n  let slot = 0;\r\n\r\n  if (awaitConfirmation) {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      DEFAULT_TIMEOUT,\r\n      connection,\r\n      commitment,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    slot = confirmation?.slot || 0;\r\n\r\n    if (confirmation?.err) {\r\n      const errors = await getErrorForTransaction(connection, txid);\r\n\r\n      console.log(errors);\r\n      throw new Error(`Raw transaction ${txid} failed`);\r\n    }\r\n  }\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const sendTransactionWithRetry = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n  beforeSend?: () => void,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach(instruction => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map(s => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  if (beforeSend) {\r\n    beforeSend();\r\n  }\r\n\r\n  const { txid, slot } = await sendSignedTransaction({\r\n    connection,\r\n    signedTransaction: transaction,\r\n  });\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nexport async function sendSignedTransaction({\r\n  signedTransaction,\r\n  connection,\r\n  timeout = DEFAULT_TIMEOUT,\r\n}: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<{ txid: string; slot: number }> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n\r\n  const startTime = getUnixTs();\r\n  let slot = 0;\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n    rawTransaction,\r\n    {\r\n      skipPreflight: true,\r\n    },\r\n  );\r\n\r\n  console.log('Started awaiting confirmation for', txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(500);\r\n    }\r\n  })();\r\n  try {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      timeout,\r\n      connection,\r\n      'recent',\r\n      true,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n\r\n    if (confirmation.err) {\r\n      console.error(confirmation.err);\r\n      throw new Error('Transaction failed: Custom instruction error');\r\n    }\r\n\r\n    slot = confirmation?.slot || 0;\r\n  } catch (err: any) {\r\n    console.error('Timeout Error caught', err);\r\n    if (err.timeout) {\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n        await simulateTransaction(connection, signedTransaction, 'single')\r\n      ).value;\r\n    } catch (e) {}\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith('Program log: ')) {\r\n            throw new Error(\r\n              'Transaction failed: ' + line.slice('Program log: '.length),\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    // throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n\r\n  console.log('Latency', txid, getUnixTs() - startTime);\r\n  return { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n  connection: Connection,\r\n  transaction: Transaction,\r\n  commitment: Commitment,\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n    // @ts-ignore\r\n    connection._disableBlockhashCaching,\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString('base64');\r\n  const config: any = { encoding: 'base64', commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest('simulateTransaction', args);\r\n  if (res.error) {\r\n    throw new Error('failed to simulate transaction: ' + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n  txid: TransactionSignature,\r\n  timeout: number,\r\n  connection: Connection,\r\n  commitment: Commitment = 'recent',\r\n  queryStatus = false,\r\n): Promise<SignatureStatus | null | void> {\r\n  let done = false;\r\n  let status: SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result, context) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log('Rejected via websocket', result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log('Resolved via websocket', result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment,\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error('WS error in setup', txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId])\r\n    connection.removeSignatureListener(subId);\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n}\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import * as anchor from '@project-serum/anchor';\r\n\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\r\nimport {\r\n  SystemProgram,\r\n  Transaction,\r\n  SYSVAR_SLOT_HASHES_PUBKEY,\r\n} from '@solana/web3.js';\r\nimport { sendTransactions, SequenceType } from './connection';\r\n\r\nimport {\r\n  CIVIC,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from './utils';\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n);\r\n\r\ninterface CandyMachineState {\r\n  authority: anchor.web3.PublicKey;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  tokenMint: null | anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  isPresale: boolean;\r\n  isWhitelistOnly: boolean;\r\n  goLiveDate: anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | {\r\n    number: anchor.BN;\r\n    endSettingType: any;\r\n  };\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n  retainAuthority: boolean;\r\n}\r\n\r\nexport interface CandyMachineAccount {\r\n  id: anchor.web3.PublicKey;\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  queryStatus = false,\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n};\r\n\r\nconst createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachineAccount> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: 'processed',\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      authority: state.authority,\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive: false,\r\n      isPresale: false,\r\n      isWhitelistOnly: false,\r\n      goLiveDate: state.data.goLiveDate,\r\n      treasury: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n      retainAuthority: state.data.retainAuthority,\r\n    },\r\n  };\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('edition'),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n  candyMachine: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM,\r\n  );\r\n};\r\n\r\nexport const getCollectionPDA = async (\r\n  candyMachineAddress: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('collection'), candyMachineAddress.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM,\r\n  );\r\n};\r\n\r\nexport interface CollectionData {\r\n  mint: anchor.web3.PublicKey;\r\n  candyMachine: anchor.web3.PublicKey;\r\n}\r\n\r\nexport const getCollectionAuthorityRecordPDA = async (\r\n  mint: anchor.web3.PublicKey,\r\n  newAuthority: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('collection_authority'),\r\n        newAuthority.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport type SetupState = {\r\n  mint: anchor.web3.Keypair;\r\n  userTokenAccount: anchor.web3.PublicKey;\r\n  transaction: string;\r\n};\r\n\r\nexport const createAccountsForMint = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey,\r\n): Promise<SetupState> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const signers: anchor.web3.Keypair[] = [mint];\r\n  const instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports:\r\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n          MintLayout.span,\r\n        ),\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      0,\r\n      payer,\r\n      payer,\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n      userTokenAccountAddress,\r\n      payer,\r\n      payer,\r\n      mint.publicKey,\r\n    ),\r\n    Token.createMintToInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      userTokenAccountAddress,\r\n      payer,\r\n      [],\r\n      1,\r\n    ),\r\n  ];\r\n\r\n  return {\r\n    mint: mint,\r\n    userTokenAccount: userTokenAccountAddress,\r\n    transaction: (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        [instructions],\r\n        [signers],\r\n        SequenceType.StopOnFailure,\r\n        'singleGossip',\r\n        () => {},\r\n        () => false,\r\n        undefined,\r\n        [],\r\n        [],\r\n      )\r\n    ).txs[0].txid,\r\n  };\r\n};\r\n\r\ntype MintResult = {\r\n  mintTxId: string;\r\n  metadataKey: anchor.web3.PublicKey;\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey,\r\n  beforeTransactions: Transaction[] = [],\r\n  afterTransactions: Transaction[] = [],\r\n  setupState?: SetupState,\r\n): Promise<MintResult | null> => {\r\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const userPayingAccountAddress = candyMachine.state.tokenMint\r\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n    : payer;\r\n\r\n  const candyMachineAddress = candyMachine.id;\r\n  const remainingAccounts = [];\r\n  const instructions = [];\r\n  const signers: anchor.web3.Keypair[] = [];\r\n  console.log('SetupState: ', setupState);\r\n  if (!setupState) {\r\n    signers.push(mint);\r\n    instructions.push(\r\n      ...[\r\n        anchor.web3.SystemProgram.createAccount({\r\n          fromPubkey: payer,\r\n          newAccountPubkey: mint.publicKey,\r\n          space: MintLayout.span,\r\n          lamports:\r\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n              MintLayout.span,\r\n            ),\r\n          programId: TOKEN_PROGRAM_ID,\r\n        }),\r\n        Token.createInitMintInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          mint.publicKey,\r\n          0,\r\n          payer,\r\n          payer,\r\n        ),\r\n        createAssociatedTokenAccountInstruction(\r\n          userTokenAccountAddress,\r\n          payer,\r\n          payer,\r\n          mint.publicKey,\r\n        ),\r\n        Token.createMintToInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          mint.publicKey,\r\n          userTokenAccountAddress,\r\n          payer,\r\n          [],\r\n          1,\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  if (candyMachine.state.gatekeeper) {\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n        await getNetworkToken(\r\n          payer,\r\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n        )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.gatekeeper.expireOnUse) {\r\n      remainingAccounts.push({\r\n        pubkey: CIVIC,\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n          await getNetworkExpire(\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n          )\r\n        )[0],\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n  if (candyMachine.state.whitelistMintSettings) {\r\n    const mint = new anchor.web3.PublicKey(\r\n      candyMachine.state.whitelistMintSettings.mint,\r\n    );\r\n\r\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n    remainingAccounts.push({\r\n      pubkey: whitelistToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n      remainingAccounts.push({\r\n        pubkey: mint,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: payer,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  if (candyMachine.state.tokenMint) {\r\n    remainingAccounts.push({\r\n      pubkey: userPayingAccountAddress,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: payer,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    });\r\n  }\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n    candyMachineAddress,\r\n  );\r\n\r\n  console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\r\n  instructions.push(\r\n    await candyMachine.program.instruction.mintNft(creatorBump, {\r\n      accounts: {\r\n        candyMachine: candyMachineAddress,\r\n        candyMachineCreator,\r\n        payer: payer,\r\n        wallet: candyMachine.state.treasury,\r\n        mint: mint.publicKey,\r\n        metadata: metadataAddress,\r\n        masterEdition,\r\n        mintAuthority: payer,\r\n        updateAuthority: payer,\r\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\r\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n      },\r\n      remainingAccounts:\r\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n    }),\r\n  );\r\n\r\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\r\n  const collectionPDAAccount =\r\n    await candyMachine.program.provider.connection.getAccountInfo(\r\n      collectionPDA,\r\n    );\r\n\r\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\r\n    try {\r\n      const collectionData =\r\n        (await candyMachine.program.account.collectionPda.fetch(\r\n          collectionPDA,\r\n        )) as CollectionData;\r\n      console.log(collectionData);\r\n      const collectionMint = collectionData.mint;\r\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\r\n        collectionMint,\r\n        collectionPDA,\r\n      );\r\n      console.log(collectionMint);\r\n      if (collectionMint) {\r\n        const collectionMetadata = await getMetadata(collectionMint);\r\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\r\n        console.log('Collection PDA: ', collectionPDA.toBase58());\r\n        console.log('Authority: ', candyMachine.state.authority.toBase58());\r\n        instructions.push(\r\n          await candyMachine.program.instruction.setCollectionDuringMint({\r\n            accounts: {\r\n              candyMachine: candyMachineAddress,\r\n              metadata: metadataAddress,\r\n              payer: payer,\r\n              collectionPda: collectionPDA,\r\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n              collectionMint,\r\n              collectionMetadata,\r\n              collectionMasterEdition,\r\n              authority: candyMachine.state.authority,\r\n              collectionAuthorityRecord,\r\n            },\r\n          }),\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  const instructionsMatrix = [instructions];\r\n  const signersMatrix = [signers];\r\n\r\n  try {\r\n    const txns = (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        instructionsMatrix,\r\n        signersMatrix,\r\n        SequenceType.StopOnFailure,\r\n        'singleGossip',\r\n        () => {},\r\n        () => false,\r\n        undefined,\r\n        beforeTransactions,\r\n        afterTransactions,\r\n      )\r\n    ).txs.map(t => t.txid);\r\n    const mintTxn = txns[0];\r\n    return {\r\n      mintTxId: mintTxn,\r\n      metadataKey: metadataAddress,\r\n    };\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n"],"sourceRoot":""}